apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: k8s-orchestrate-
spec:
  arguments:
    parameters:
      - name: handler_api_url
        value: ""
      - name: tsl_secret
        value: ""
      - name: org_name
        value: ""
      - name: base_container_name
        value: ""
      - name: build_from
        value: ""
      - name: repo_owner_name
        value: ""


  entrypoint: ent-env-deploy-wf

  podGC:
    # Pod GC strategy must be one of the following:
    # * OnPodCompletion - delete pods immediately when pod is completed (including errors/failures)
    # * OnPodSuccess - delete pods immediately when pod is successful
    # * OnWorkflowCompletion - delete pods when workflow is completed
    # * OnWorkflowSuccess - delete pods when workflow is successful
    strategy: OnWorkflowSuccess

  templates:
    - name: ent-env-deploy-wf
      steps:
        - - name: build
            template: build
            arguments:
              parameters:
                - name: handler_api_url
                  value: "{{workflow.parameters.handler_api_url}}"
                - name: tsl_secret
                  value: "{{workflow.parameters.tsl_secret}}"
                - name: org_name
                  value: "{{workflow.parameters.org_name}}"
                - name: base_container_name
                  value: "{{workflow.parameters.base_container_name}}"
                - name: build_from
                  value: "{{workflow.parameters.build_from}}"
                - name: repo_owner_name
                  value: "{{workflow.parameters.repo_owner_name}}"

    - name: build
      inputs:
        parameters:
          - name: handler_api_url
          - name: tsl_secret
          - name: org_name
          - name: base_container_name
          - name: build_from
          - name: repo_owner_name

      resource:
        action: create
        successCondition: status.succeeded > 0
        failureCondition: status.failed > 0
        manifest: |
          apiVersion: batch/v1
          kind: Job
          metadata:
            generateName: build-
          spec:
            ttlSecondsAfterFinished: 300
            backoffLimit: 0
            template:
              metadata:
                name: ent-env-deploy
              spec:
                shareProcessNamespace: true
                restartPolicy: Never
                nodeSelector: 
                  eks.amazonaws.com/nodegroup: heavy
                containers:
                  - name: docker-cmds
                    image: hookandloop/ent-env-deploy:0.0.1
                    imagePullPolicy: Always
                    resources:
                      requests:
                        cpu: 500m
                        memory: 3Gi
                    env:
                      - name: DOCKER_HOST
                        value: tcp://localhost:2375
                      - name: IMAGE_LIBRARY_USER
                        valueFrom:
                          secretKeyRef:
                            name: image-library-creds
                            key: user
                      - name: IMAGE_LIBRARY_PASS
                        valueFrom:
                          secretKeyRef:
                            name: image-library-creds
                            key: pass
                      - name: GITHUB_ACCESS_TOKEN
                        valueFrom:
                          secretKeyRef:
                            name: github-access-token
                            key: token
                      - name: HANDLER_API_KEY
                        valueFrom:
                          secretKeyRef:
                            name: handler-api-key
                            key: token
                      - name: TLS_SECRET
                        valueFrom:
                          secretKeyRef:
                            name: tls-secret-key
                            key: token
                      - name: HANDLER_API_URL
                        value: "{{inputs.parameters.handler_api_url}}"
                      - name: ORG_NAME
                        value: "{{inputs.parameters.org_name}}"
                      - name: BASE_CONTAINER_NAME
                        value: "{{inputs.parameters.base_container_name}}"
                      - name: BUILD_FROM
                        value: "{{inputs.parameters.build_from}}"
                      - name: REPO_OWNER_NAME
                        value: "{{inputs.parameters.repo_owner_name}}"
                    #command: ['docker', 'run', '-p', '8080:8080', 'httpd:latest']
                    command: ["/bin/bash"]
                    args: ["-c", ". ./run.sh"]
                  - name: dind-daemon
                    image: "docker:dind"
                    imagePullPolicy: Always
                    command: ["dockerd", "--host", "tcp://127.0.0.1:2375"]
                    resources:
                      requests:
                        cpu: 500m
                        memory: 2Gi
                    securityContext:
                        privileged: true
                    volumeMounts:
                      - name: docker-storage
                        mountPath: /var/lib/docker
                volumes:
                  - name: docker-storage
                    emptyDir: {}

      outputs:
        parameters:
          - name: job-name
            valueFrom:
              jsonPath: "{.metadata.name}"
          - name: job-uid
            valueFrom:
              jsonPath: "{.metadata.uid}"
